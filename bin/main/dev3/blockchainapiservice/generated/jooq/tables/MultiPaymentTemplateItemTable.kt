/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.MultiPaymentTemplateItemRecord
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BalanceConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class MultiPaymentTemplateItemTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, MultiPaymentTemplateItemRecord>?,
    aliased: Table<MultiPaymentTemplateItemRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<MultiPaymentTemplateItemRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : MultiPaymentTemplateItemTable()

    override fun getRecordType(): Class<MultiPaymentTemplateItemRecord> = MultiPaymentTemplateItemRecord::class.java

    val ID: TableField<MultiPaymentTemplateItemRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val TEMPLATE_ID: TableField<MultiPaymentTemplateItemRecord, UUID> = createField(DSL.name("template_id"), SQLDataType.UUID.nullable(false), this, "")

    val WALLET_ADDRESS: TableField<MultiPaymentTemplateItemRecord, WalletAddress> = createField(DSL.name("wallet_address"), SQLDataType.VARCHAR.nullable(false), this, "", WalletAddressConverter())

    val ITEM_NAME: TableField<MultiPaymentTemplateItemRecord, String?> = createField(DSL.name("item_name"), SQLDataType.VARCHAR, this, "")

    val ASSET_AMOUNT: TableField<MultiPaymentTemplateItemRecord, Balance> = createField(DSL.name("asset_amount"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BalanceConverter())

    val CREATED_AT: TableField<MultiPaymentTemplateItemRecord, UtcDateTime> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    private constructor(alias: Name, aliased: Table<MultiPaymentTemplateItemRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<MultiPaymentTemplateItemRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("multi_payment_template_item"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<MultiPaymentTemplateItemRecord> = Internal.createUniqueKey(MultiPaymentTemplateItemTable, DSL.name("multi_payment_template_item_pkey"), arrayOf(MultiPaymentTemplateItemTable.ID), true)
    override fun `as`(alias: String): MultiPaymentTemplateItemTable = MultiPaymentTemplateItemTable(DSL.name(alias), this)
    override fun `as`(alias: Name): MultiPaymentTemplateItemTable = MultiPaymentTemplateItemTable(alias, this)

    override fun rename(name: String): MultiPaymentTemplateItemTable = MultiPaymentTemplateItemTable(DSL.name(name), null)

    override fun rename(name: Name): MultiPaymentTemplateItemTable = MultiPaymentTemplateItemTable(name, null)
}
