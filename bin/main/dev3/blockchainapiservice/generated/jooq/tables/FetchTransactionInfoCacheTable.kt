/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.FetchTransactionInfoCacheRecord
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BalanceConverter
import dev3.blockchainapiservice.util.BlockNumber
import dev3.blockchainapiservice.util.BlockNumberConverter
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.ContractAddressConverter
import dev3.blockchainapiservice.util.FunctionData
import dev3.blockchainapiservice.util.FunctionDataConverter
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.TransactionHashConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class FetchTransactionInfoCacheTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FetchTransactionInfoCacheRecord>?,
    aliased: Table<FetchTransactionInfoCacheRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FetchTransactionInfoCacheRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : FetchTransactionInfoCacheTable()

    override fun getRecordType(): Class<FetchTransactionInfoCacheRecord> = FetchTransactionInfoCacheRecord::class.java

    val ID: TableField<FetchTransactionInfoCacheRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val CHAIN_ID: TableField<FetchTransactionInfoCacheRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val CUSTOM_RPC_URL: TableField<FetchTransactionInfoCacheRecord, String> = createField(DSL.name("custom_rpc_url"), SQLDataType.VARCHAR.nullable(false), this, "")

    val TX_HASH: TableField<FetchTransactionInfoCacheRecord, TransactionHash> = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR.nullable(false), this, "", TransactionHashConverter())

    val FROM_ADDRESS: TableField<FetchTransactionInfoCacheRecord, WalletAddress> = createField(DSL.name("from_address"), SQLDataType.VARCHAR.nullable(false), this, "", WalletAddressConverter())

    val TO_ADDRESS: TableField<FetchTransactionInfoCacheRecord, WalletAddress> = createField(DSL.name("to_address"), SQLDataType.VARCHAR.nullable(false), this, "", WalletAddressConverter())

    val DEPLOYED_CONTRACT_ADDRESS: TableField<FetchTransactionInfoCacheRecord, ContractAddress?> = createField(DSL.name("deployed_contract_address"), SQLDataType.VARCHAR, this, "", ContractAddressConverter())

    val TX_DATA: TableField<FetchTransactionInfoCacheRecord, FunctionData> = createField(DSL.name("tx_data"), SQLDataType.BLOB.nullable(false), this, "", FunctionDataConverter())

    val VALUE_AMOUNT: TableField<FetchTransactionInfoCacheRecord, Balance> = createField(DSL.name("value_amount"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BalanceConverter())

    val BLOCK_NUMBER: TableField<FetchTransactionInfoCacheRecord, BlockNumber> = createField(DSL.name("block_number"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BlockNumberConverter())

    val TIMESTAMP: TableField<FetchTransactionInfoCacheRecord, UtcDateTime> = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    val SUCCESS: TableField<FetchTransactionInfoCacheRecord, Boolean> = createField(DSL.name("success"), SQLDataType.BOOLEAN.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<FetchTransactionInfoCacheRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FetchTransactionInfoCacheRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("fetch_transaction_info_cache"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<FetchTransactionInfoCacheRecord> = Internal.createUniqueKey(FetchTransactionInfoCacheTable, DSL.name("fetch_transaction_info_cache_pkey"), arrayOf(FetchTransactionInfoCacheTable.ID), true)
    override fun `as`(alias: String): FetchTransactionInfoCacheTable = FetchTransactionInfoCacheTable(DSL.name(alias), this)
    override fun `as`(alias: Name): FetchTransactionInfoCacheTable = FetchTransactionInfoCacheTable(alias, this)

    override fun rename(name: String): FetchTransactionInfoCacheTable = FetchTransactionInfoCacheTable(DSL.name(name), null)

    override fun rename(name: Name): FetchTransactionInfoCacheTable = FetchTransactionInfoCacheTable(name, null)
}
