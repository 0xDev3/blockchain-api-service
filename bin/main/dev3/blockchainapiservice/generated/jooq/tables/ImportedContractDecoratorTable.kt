/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.ImportedContractDecoratorRecord
import dev3.blockchainapiservice.model.json.ArtifactJson
import dev3.blockchainapiservice.model.json.ManifestJson
import dev3.blockchainapiservice.util.ArtifactJsonConverter
import dev3.blockchainapiservice.util.ContractId
import dev3.blockchainapiservice.util.ContractIdConverter
import dev3.blockchainapiservice.util.ManifestJsonConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class ImportedContractDecoratorTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ImportedContractDecoratorRecord>?,
    aliased: Table<ImportedContractDecoratorRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ImportedContractDecoratorRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : ImportedContractDecoratorTable()

    override fun getRecordType(): Class<ImportedContractDecoratorRecord> = ImportedContractDecoratorRecord::class.java

    val ID: TableField<ImportedContractDecoratorRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val PROJECT_ID: TableField<ImportedContractDecoratorRecord, UUID> = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "")

    val CONTRACT_ID: TableField<ImportedContractDecoratorRecord, ContractId> = createField(DSL.name("contract_id"), SQLDataType.VARCHAR.nullable(false), this, "", ContractIdConverter())

    val MANIFEST_JSON: TableField<ImportedContractDecoratorRecord, ManifestJson> = createField(DSL.name("manifest_json"), SQLDataType.JSON.nullable(false), this, "", ManifestJsonConverter())

    val ARTIFACT_JSON: TableField<ImportedContractDecoratorRecord, ArtifactJson> = createField(DSL.name("artifact_json"), SQLDataType.JSON.nullable(false), this, "", ArtifactJsonConverter())

    val INFO_MARKDOWN: TableField<ImportedContractDecoratorRecord, String> = createField(DSL.name("info_markdown"), SQLDataType.VARCHAR.nullable(false), this, "")

    val CONTRACT_TAGS: TableField<ImportedContractDecoratorRecord, Array<String>> = createField(DSL.name("contract_tags"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    val CONTRACT_IMPLEMENTS: TableField<ImportedContractDecoratorRecord, Array<String>> = createField(DSL.name("contract_implements"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    val IMPORTED_AT: TableField<ImportedContractDecoratorRecord, UtcDateTime> = createField(DSL.name("imported_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", UtcDateTimeConverter())

    private constructor(alias: Name, aliased: Table<ImportedContractDecoratorRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ImportedContractDecoratorRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("imported_contract_decorator"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<ImportedContractDecoratorRecord> = Internal.createUniqueKey(ImportedContractDecoratorTable, DSL.name("imported_contract_decorator_pkey"), arrayOf(ImportedContractDecoratorTable.ID), true)
    override fun getUniqueKeys(): List<UniqueKey<ImportedContractDecoratorRecord>> = listOf(
        Internal.createUniqueKey(ImportedContractDecoratorTable, DSL.name("imported_contract_decorator_project_id_contract_id_key"), arrayOf(ImportedContractDecoratorTable.PROJECT_ID, ImportedContractDecoratorTable.CONTRACT_ID), true)
    )
    override fun `as`(alias: String): ImportedContractDecoratorTable = ImportedContractDecoratorTable(DSL.name(alias), this)
    override fun `as`(alias: Name): ImportedContractDecoratorTable = ImportedContractDecoratorTable(alias, this)

    override fun rename(name: String): ImportedContractDecoratorTable = ImportedContractDecoratorTable(DSL.name(name), null)

    override fun rename(name: Name): ImportedContractDecoratorTable = ImportedContractDecoratorTable(name, null)
}
