/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.FetchAccountBalanceCacheRecord
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BalanceConverter
import dev3.blockchainapiservice.util.BlockNumber
import dev3.blockchainapiservice.util.BlockNumberConverter
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class FetchAccountBalanceCacheTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, FetchAccountBalanceCacheRecord>?,
    aliased: Table<FetchAccountBalanceCacheRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<FetchAccountBalanceCacheRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : FetchAccountBalanceCacheTable()

    override fun getRecordType(): Class<FetchAccountBalanceCacheRecord> = FetchAccountBalanceCacheRecord::class.java

    val ID: TableField<FetchAccountBalanceCacheRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val CHAIN_ID: TableField<FetchAccountBalanceCacheRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val CUSTOM_RPC_URL: TableField<FetchAccountBalanceCacheRecord, String> = createField(DSL.name("custom_rpc_url"), SQLDataType.VARCHAR.nullable(false), this, "")

    val WALLET_ADDRESS: TableField<FetchAccountBalanceCacheRecord, WalletAddress> = createField(DSL.name("wallet_address"), SQLDataType.VARCHAR.nullable(false), this, "", WalletAddressConverter())

    val BLOCK_NUMBER: TableField<FetchAccountBalanceCacheRecord, BlockNumber> = createField(DSL.name("block_number"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BlockNumberConverter())

    val TIMESTAMP: TableField<FetchAccountBalanceCacheRecord, UtcDateTime> = createField(DSL.name("timestamp"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    val ASSET_AMOUNT: TableField<FetchAccountBalanceCacheRecord, Balance> = createField(DSL.name("asset_amount"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BalanceConverter())

    private constructor(alias: Name, aliased: Table<FetchAccountBalanceCacheRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<FetchAccountBalanceCacheRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("fetch_account_balance_cache"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<FetchAccountBalanceCacheRecord> = Internal.createUniqueKey(FetchAccountBalanceCacheTable, DSL.name("fetch_account_balance_cache_pkey"), arrayOf(FetchAccountBalanceCacheTable.ID), true)
    override fun `as`(alias: String): FetchAccountBalanceCacheTable = FetchAccountBalanceCacheTable(DSL.name(alias), this)
    override fun `as`(alias: Name): FetchAccountBalanceCacheTable = FetchAccountBalanceCacheTable(alias, this)

    override fun rename(name: String): FetchAccountBalanceCacheTable = FetchAccountBalanceCacheTable(DSL.name(name), null)

    override fun rename(name: Name): FetchAccountBalanceCacheTable = FetchAccountBalanceCacheTable(name, null)
}
