/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import com.fasterxml.jackson.databind.JsonNode

import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.ContractDeploymentRequestRecord
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BalanceConverter
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.ContractAddressConverter
import dev3.blockchainapiservice.util.ContractBinaryData
import dev3.blockchainapiservice.util.ContractBinaryDataConverter
import dev3.blockchainapiservice.util.JsonNodeConverter
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.TransactionHashConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class ContractDeploymentRequestTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ContractDeploymentRequestRecord>?,
    aliased: Table<ContractDeploymentRequestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ContractDeploymentRequestRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : ContractDeploymentRequestTable()

    override fun getRecordType(): Class<ContractDeploymentRequestRecord> = ContractDeploymentRequestRecord::class.java

    val ID: TableField<ContractDeploymentRequestRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val ALIAS: TableField<ContractDeploymentRequestRecord, String> = createField(DSL.name("alias"), SQLDataType.VARCHAR.nullable(false), this, "")

    val CONTRACT_METADATA_ID: TableField<ContractDeploymentRequestRecord, UUID> = createField(DSL.name("contract_metadata_id"), SQLDataType.UUID.nullable(false), this, "")

    val CONTRACT_DATA: TableField<ContractDeploymentRequestRecord, ContractBinaryData> = createField(DSL.name("contract_data"), SQLDataType.BLOB.nullable(false), this, "", ContractBinaryDataConverter())

    val CONSTRUCTOR_PARAMS: TableField<ContractDeploymentRequestRecord, JsonNode> = createField(DSL.name("constructor_params"), SQLDataType.JSON.nullable(false), this, "", JsonNodeConverter())

    val INITIAL_ETH_AMOUNT: TableField<ContractDeploymentRequestRecord, Balance> = createField(DSL.name("initial_eth_amount"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BalanceConverter())

    val CHAIN_ID: TableField<ContractDeploymentRequestRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val REDIRECT_URL: TableField<ContractDeploymentRequestRecord, String> = createField(DSL.name("redirect_url"), SQLDataType.VARCHAR.nullable(false), this, "")

    val PROJECT_ID: TableField<ContractDeploymentRequestRecord, UUID> = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "")

    val CREATED_AT: TableField<ContractDeploymentRequestRecord, UtcDateTime> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    val ARBITRARY_DATA: TableField<ContractDeploymentRequestRecord, JsonNode?> = createField(DSL.name("arbitrary_data"), SQLDataType.JSON, this, "", JsonNodeConverter())

    val SCREEN_BEFORE_ACTION_MESSAGE: TableField<ContractDeploymentRequestRecord, String?> = createField(DSL.name("screen_before_action_message"), SQLDataType.VARCHAR, this, "")

    val SCREEN_AFTER_ACTION_MESSAGE: TableField<ContractDeploymentRequestRecord, String?> = createField(DSL.name("screen_after_action_message"), SQLDataType.VARCHAR, this, "")

    val CONTRACT_ADDRESS: TableField<ContractDeploymentRequestRecord, ContractAddress?> = createField(DSL.name("contract_address"), SQLDataType.VARCHAR, this, "", ContractAddressConverter())

    val DEPLOYER_ADDRESS: TableField<ContractDeploymentRequestRecord, WalletAddress?> = createField(DSL.name("deployer_address"), SQLDataType.VARCHAR, this, "", WalletAddressConverter())

    val TX_HASH: TableField<ContractDeploymentRequestRecord, TransactionHash?> = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR, this, "", TransactionHashConverter())

    val IMPORTED: TableField<ContractDeploymentRequestRecord, Boolean> = createField(DSL.name("imported"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    val DELETED: TableField<ContractDeploymentRequestRecord, Boolean> = createField(DSL.name("deleted"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    val PROXY: TableField<ContractDeploymentRequestRecord, Boolean> = createField(DSL.name("proxy"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "")

    val IMPLEMENTATION_CONTRACT_ADDRESS: TableField<ContractDeploymentRequestRecord, ContractAddress?> = createField(DSL.name("implementation_contract_address"), SQLDataType.VARCHAR, this, "", ContractAddressConverter())

    private constructor(alias: Name, aliased: Table<ContractDeploymentRequestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ContractDeploymentRequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("contract_deployment_request"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<ContractDeploymentRequestRecord> = Internal.createUniqueKey(ContractDeploymentRequestTable, DSL.name("contract_deployment_request_pkey"), arrayOf(ContractDeploymentRequestTable.ID), true)
    override fun getUniqueKeys(): List<UniqueKey<ContractDeploymentRequestRecord>> = listOf(
        Internal.createUniqueKey(ContractDeploymentRequestTable, DSL.name("contract_deployment_request_per_project_unique_alias"), arrayOf(ContractDeploymentRequestTable.PROJECT_ID, ContractDeploymentRequestTable.ALIAS), true)
    )
    override fun `as`(alias: String): ContractDeploymentRequestTable = ContractDeploymentRequestTable(DSL.name(alias), this)
    override fun `as`(alias: Name): ContractDeploymentRequestTable = ContractDeploymentRequestTable(alias, this)

    override fun rename(name: String): ContractDeploymentRequestTable = ContractDeploymentRequestTable(DSL.name(name), null)

    override fun rename(name: Name): ContractDeploymentRequestTable = ContractDeploymentRequestTable(name, null)
}
