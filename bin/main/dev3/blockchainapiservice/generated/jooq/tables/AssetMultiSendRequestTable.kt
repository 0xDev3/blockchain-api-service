/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import com.fasterxml.jackson.databind.JsonNode

import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.AssetMultiSendRequestRecord
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.ContractAddressConverter
import dev3.blockchainapiservice.util.JsonNodeConverter
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.TransactionHashConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.math.BigDecimal
import java.util.UUID

import kotlin.collections.List

import org.jooq.Check
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class AssetMultiSendRequestTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AssetMultiSendRequestRecord>?,
    aliased: Table<AssetMultiSendRequestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AssetMultiSendRequestRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : AssetMultiSendRequestTable()

    override fun getRecordType(): Class<AssetMultiSendRequestRecord> = AssetMultiSendRequestRecord::class.java

    val ID: TableField<AssetMultiSendRequestRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val CHAIN_ID: TableField<AssetMultiSendRequestRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val REDIRECT_URL: TableField<AssetMultiSendRequestRecord, String> = createField(DSL.name("redirect_url"), SQLDataType.VARCHAR.nullable(false), this, "")

    val TOKEN_ADDRESS: TableField<AssetMultiSendRequestRecord, ContractAddress?> = createField(DSL.name("token_address"), SQLDataType.VARCHAR, this, "", ContractAddressConverter())

    val DISPERSE_CONTRACT_ADDRESS: TableField<AssetMultiSendRequestRecord, ContractAddress> = createField(DSL.name("disperse_contract_address"), SQLDataType.VARCHAR.nullable(false), this, "", ContractAddressConverter())

    val ASSET_AMOUNTS: TableField<AssetMultiSendRequestRecord, Array<BigDecimal>> = createField(DSL.name("asset_amounts"), SQLDataType.NUMERIC.getArrayDataType(), this, "")

    val ASSET_RECIPIENT_ADDRESSES: TableField<AssetMultiSendRequestRecord, Array<String>> = createField(DSL.name("asset_recipient_addresses"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    val ITEM_NAMES: TableField<AssetMultiSendRequestRecord, Array<String>> = createField(DSL.name("item_names"), SQLDataType.VARCHAR.getArrayDataType(), this, "")

    val ASSET_SENDER_ADDRESS: TableField<AssetMultiSendRequestRecord, WalletAddress?> = createField(DSL.name("asset_sender_address"), SQLDataType.VARCHAR, this, "", WalletAddressConverter())

    val ARBITRARY_DATA: TableField<AssetMultiSendRequestRecord, JsonNode?> = createField(DSL.name("arbitrary_data"), SQLDataType.JSON, this, "", JsonNodeConverter())

    val APPROVE_TX_HASH: TableField<AssetMultiSendRequestRecord, TransactionHash?> = createField(DSL.name("approve_tx_hash"), SQLDataType.VARCHAR, this, "", TransactionHashConverter())

    val DISPERSE_TX_HASH: TableField<AssetMultiSendRequestRecord, TransactionHash?> = createField(DSL.name("disperse_tx_hash"), SQLDataType.VARCHAR, this, "", TransactionHashConverter())

    val APPROVE_SCREEN_BEFORE_ACTION_MESSAGE: TableField<AssetMultiSendRequestRecord, String?> = createField(DSL.name("approve_screen_before_action_message"), SQLDataType.VARCHAR, this, "")

    val APPROVE_SCREEN_AFTER_ACTION_MESSAGE: TableField<AssetMultiSendRequestRecord, String?> = createField(DSL.name("approve_screen_after_action_message"), SQLDataType.VARCHAR, this, "")

    val DISPERSE_SCREEN_BEFORE_ACTION_MESSAGE: TableField<AssetMultiSendRequestRecord, String?> = createField(DSL.name("disperse_screen_before_action_message"), SQLDataType.VARCHAR, this, "")

    val DISPERSE_SCREEN_AFTER_ACTION_MESSAGE: TableField<AssetMultiSendRequestRecord, String?> = createField(DSL.name("disperse_screen_after_action_message"), SQLDataType.VARCHAR, this, "")

    val PROJECT_ID: TableField<AssetMultiSendRequestRecord, UUID> = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false), this, "")

    val CREATED_AT: TableField<AssetMultiSendRequestRecord, UtcDateTime> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    private constructor(alias: Name, aliased: Table<AssetMultiSendRequestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AssetMultiSendRequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("asset_multi_send_request"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<AssetMultiSendRequestRecord> = Internal.createUniqueKey(AssetMultiSendRequestTable, DSL.name("asset_multi_send_request_pkey"), arrayOf(AssetMultiSendRequestTable.ID), true)
    override fun getChecks(): List<Check<AssetMultiSendRequestRecord>> = listOf(
        Internal.createCheck(this, DSL.name("asset_multi_send_request_check"), "(((array_length(asset_amounts, 1) = array_length(asset_recipient_addresses, 1)) AND (array_length(asset_amounts, 1) = array_length(item_names, 1))))", true)
    )
    override fun `as`(alias: String): AssetMultiSendRequestTable = AssetMultiSendRequestTable(DSL.name(alias), this)
    override fun `as`(alias: Name): AssetMultiSendRequestTable = AssetMultiSendRequestTable(alias, this)

    override fun rename(name: String): AssetMultiSendRequestTable = AssetMultiSendRequestTable(DSL.name(name), null)

    override fun rename(name: Name): AssetMultiSendRequestTable = AssetMultiSendRequestTable(name, null)
}
