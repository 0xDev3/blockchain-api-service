/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import com.fasterxml.jackson.databind.JsonNode

import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.Erc20LockRequestRecord
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BalanceConverter
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.ContractAddressConverter
import dev3.blockchainapiservice.util.DurationSeconds
import dev3.blockchainapiservice.util.DurationSecondsConverter
import dev3.blockchainapiservice.util.JsonNodeConverter
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.TransactionHashConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter
import dev3.blockchainapiservice.util.WalletAddress
import dev3.blockchainapiservice.util.WalletAddressConverter

import java.util.UUID

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class Erc20LockRequestTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, Erc20LockRequestRecord>?,
    aliased: Table<Erc20LockRequestRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<Erc20LockRequestRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : Erc20LockRequestTable()

    override fun getRecordType(): Class<Erc20LockRequestRecord> = Erc20LockRequestRecord::class.java

    val ID: TableField<Erc20LockRequestRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val CHAIN_ID: TableField<Erc20LockRequestRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val REDIRECT_URL: TableField<Erc20LockRequestRecord, String> = createField(DSL.name("redirect_url"), SQLDataType.VARCHAR.nullable(false), this, "")

    val TOKEN_ADDRESS: TableField<Erc20LockRequestRecord, ContractAddress> = createField(DSL.name("token_address"), SQLDataType.VARCHAR.nullable(false), this, "", ContractAddressConverter())

    val TOKEN_AMOUNT: TableField<Erc20LockRequestRecord, Balance> = createField(DSL.name("token_amount"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", BalanceConverter())

    val LOCK_DURATION_SECONDS: TableField<Erc20LockRequestRecord, DurationSeconds> = createField(DSL.name("lock_duration_seconds"), SQLDataType.DECIMAL_INTEGER(78).nullable(false), this, "", DurationSecondsConverter())

    val LOCK_CONTRACT_ADDRESS: TableField<Erc20LockRequestRecord, ContractAddress> = createField(DSL.name("lock_contract_address"), SQLDataType.VARCHAR.nullable(false), this, "", ContractAddressConverter())

    val TOKEN_SENDER_ADDRESS: TableField<Erc20LockRequestRecord, WalletAddress?> = createField(DSL.name("token_sender_address"), SQLDataType.VARCHAR, this, "", WalletAddressConverter())

    val ARBITRARY_DATA: TableField<Erc20LockRequestRecord, JsonNode?> = createField(DSL.name("arbitrary_data"), SQLDataType.JSON, this, "", JsonNodeConverter())

    val TX_HASH: TableField<Erc20LockRequestRecord, TransactionHash?> = createField(DSL.name("tx_hash"), SQLDataType.VARCHAR, this, "", TransactionHashConverter())

    val SCREEN_BEFORE_ACTION_MESSAGE: TableField<Erc20LockRequestRecord, String?> = createField(DSL.name("screen_before_action_message"), SQLDataType.VARCHAR, this, "")

    val SCREEN_AFTER_ACTION_MESSAGE: TableField<Erc20LockRequestRecord, String?> = createField(DSL.name("screen_after_action_message"), SQLDataType.VARCHAR, this, "")

    val PROJECT_ID: TableField<Erc20LockRequestRecord, UUID> = createField(DSL.name("project_id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("'00000000-0000-0000-0000-000000000000'::uuid", SQLDataType.UUID)), this, "")

    val CREATED_AT: TableField<Erc20LockRequestRecord, UtcDateTime> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "", UtcDateTimeConverter())

    private constructor(alias: Name, aliased: Table<Erc20LockRequestRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<Erc20LockRequestRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("erc20_lock_request"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<Erc20LockRequestRecord> = Internal.createUniqueKey(Erc20LockRequestTable, DSL.name("erc20_lock_request_pkey"), arrayOf(Erc20LockRequestTable.ID), true)
    override fun `as`(alias: String): Erc20LockRequestTable = Erc20LockRequestTable(DSL.name(alias), this)
    override fun `as`(alias: Name): Erc20LockRequestTable = Erc20LockRequestTable(alias, this)

    override fun rename(name: String): Erc20LockRequestTable = Erc20LockRequestTable(DSL.name(name), null)

    override fun rename(name: Name): Erc20LockRequestTable = Erc20LockRequestTable(name, null)
}
