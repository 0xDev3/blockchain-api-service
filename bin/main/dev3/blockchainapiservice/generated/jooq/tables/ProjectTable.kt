/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables


import dev3.blockchainapiservice.generated.jooq.BlockchainApiService
import dev3.blockchainapiservice.generated.jooq.tables.records.ProjectRecord
import dev3.blockchainapiservice.util.BaseUrl
import dev3.blockchainapiservice.util.BaseUrlConverter
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ChainIdConverter
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.ContractAddressConverter
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.UtcDateTimeConverter

import java.util.UUID

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


@Suppress("UNCHECKED_CAST")
open class ProjectTable(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProjectRecord>?,
    aliased: Table<ProjectRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProjectRecord>(
    alias,
    BlockchainApiService.BLOCKCHAIN_API_SERVICE,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object : ProjectTable()

    override fun getRecordType(): Class<ProjectRecord> = ProjectRecord::class.java

    val ID: TableField<ProjectRecord, UUID> = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "")

    val OWNER_ID: TableField<ProjectRecord, UUID> = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "")

    val ISSUER_CONTRACT_ADDRESS: TableField<ProjectRecord, ContractAddress> = createField(DSL.name("issuer_contract_address"), SQLDataType.VARCHAR.nullable(false), this, "", ContractAddressConverter())

    val BASE_REDIRECT_URL: TableField<ProjectRecord, BaseUrl> = createField(DSL.name("base_redirect_url"), SQLDataType.VARCHAR.nullable(false), this, "", BaseUrlConverter())

    val CHAIN_ID: TableField<ProjectRecord, ChainId> = createField(DSL.name("chain_id"), SQLDataType.BIGINT.nullable(false), this, "", ChainIdConverter())

    val CUSTOM_RPC_URL: TableField<ProjectRecord, String?> = createField(DSL.name("custom_rpc_url"), SQLDataType.VARCHAR, this, "")

    val CREATED_AT: TableField<ProjectRecord, UtcDateTime> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "", UtcDateTimeConverter())

    private constructor(alias: Name, aliased: Table<ProjectRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProjectRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    constructor(alias: String): this(DSL.name(alias))

    constructor(alias: Name): this(alias, null)

    constructor(): this(DSL.name("project"), null)
    override fun getSchema(): Schema? = if (aliased()) null else BlockchainApiService.BLOCKCHAIN_API_SERVICE
    override fun getPrimaryKey(): UniqueKey<ProjectRecord> = Internal.createUniqueKey(ProjectTable, DSL.name("project_pkey"), arrayOf(ProjectTable.ID), true)
    override fun getUniqueKeys(): List<UniqueKey<ProjectRecord>> = listOf(
        Internal.createUniqueKey(ProjectTable, DSL.name("project_unique_issuer_per_chain"), arrayOf(ProjectTable.ISSUER_CONTRACT_ADDRESS, ProjectTable.CHAIN_ID), true)
    )
    override fun `as`(alias: String): ProjectTable = ProjectTable(DSL.name(alias), this)
    override fun `as`(alias: Name): ProjectTable = ProjectTable(alias, this)

    override fun rename(name: String): ProjectTable = ProjectTable(DSL.name(name), null)

    override fun rename(name: Name): ProjectTable = ProjectTable(name, null)
}
