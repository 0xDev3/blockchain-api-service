/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables.records


import dev3.blockchainapiservice.generated.jooq.tables.FetchTransactionInfoCacheTable
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.BlockNumber
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.FunctionData
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.WalletAddress

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


@Suppress("UNCHECKED_CAST")
open class FetchTransactionInfoCacheRecord() : UpdatableRecordImpl<FetchTransactionInfoCacheRecord>(FetchTransactionInfoCacheTable) {

    var id: UUID
        private set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    var chainId: ChainId
        private set(value): Unit = set(1, value)
        get(): ChainId = get(1) as ChainId

    var customRpcUrl: String
        private set(value): Unit = set(2, value)
        get(): String = get(2) as String

    var txHash: TransactionHash
        private set(value): Unit = set(3, value)
        get(): TransactionHash = get(3) as TransactionHash

    var fromAddress: WalletAddress
        private set(value): Unit = set(4, value)
        get(): WalletAddress = get(4) as WalletAddress

    var toAddress: WalletAddress
        private set(value): Unit = set(5, value)
        get(): WalletAddress = get(5) as WalletAddress

    var deployedContractAddress: ContractAddress?
        private set(value): Unit = set(6, value)
        get(): ContractAddress? = get(6) as ContractAddress?

    var txData: FunctionData
        private set(value): Unit = set(7, value)
        get(): FunctionData = get(7) as FunctionData

    var valueAmount: Balance
        private set(value): Unit = set(8, value)
        get(): Balance = get(8) as Balance

    var blockNumber: BlockNumber
        private set(value): Unit = set(9, value)
        get(): BlockNumber = get(9) as BlockNumber

    var timestamp: UtcDateTime
        private set(value): Unit = set(10, value)
        get(): UtcDateTime = get(10) as UtcDateTime

    var success: Boolean
        private set(value): Unit = set(11, value)
        get(): Boolean = get(11) as Boolean
    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    constructor(id: UUID, chainId: ChainId, customRpcUrl: String, txHash: TransactionHash, fromAddress: WalletAddress, toAddress: WalletAddress, deployedContractAddress: ContractAddress?, txData: FunctionData, valueAmount: Balance, blockNumber: BlockNumber, timestamp: UtcDateTime, success: Boolean): this() {
        this.id = id
        this.chainId = chainId
        this.customRpcUrl = customRpcUrl
        this.txHash = txHash
        this.fromAddress = fromAddress
        this.toAddress = toAddress
        this.deployedContractAddress = deployedContractAddress
        this.txData = txData
        this.valueAmount = valueAmount
        this.blockNumber = blockNumber
        this.timestamp = timestamp
        this.success = success
    }
}
