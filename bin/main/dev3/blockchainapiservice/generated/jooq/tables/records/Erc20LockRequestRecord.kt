/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables.records


import com.fasterxml.jackson.databind.JsonNode

import dev3.blockchainapiservice.generated.jooq.tables.Erc20LockRequestTable
import dev3.blockchainapiservice.util.Balance
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.DurationSeconds
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.WalletAddress

import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


@Suppress("UNCHECKED_CAST")
open class Erc20LockRequestRecord() : UpdatableRecordImpl<Erc20LockRequestRecord>(Erc20LockRequestTable) {

    var id: UUID
        private set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    var chainId: ChainId
        private set(value): Unit = set(1, value)
        get(): ChainId = get(1) as ChainId

    var redirectUrl: String
        private set(value): Unit = set(2, value)
        get(): String = get(2) as String

    var tokenAddress: ContractAddress
        private set(value): Unit = set(3, value)
        get(): ContractAddress = get(3) as ContractAddress

    var tokenAmount: Balance
        private set(value): Unit = set(4, value)
        get(): Balance = get(4) as Balance

    var lockDurationSeconds: DurationSeconds
        private set(value): Unit = set(5, value)
        get(): DurationSeconds = get(5) as DurationSeconds

    var lockContractAddress: ContractAddress
        private set(value): Unit = set(6, value)
        get(): ContractAddress = get(6) as ContractAddress

    var tokenSenderAddress: WalletAddress?
        private set(value): Unit = set(7, value)
        get(): WalletAddress? = get(7) as WalletAddress?

    var arbitraryData: JsonNode?
        private set(value): Unit = set(8, value)
        get(): JsonNode? = get(8) as JsonNode?

    var txHash: TransactionHash?
        private set(value): Unit = set(9, value)
        get(): TransactionHash? = get(9) as TransactionHash?

    var screenBeforeActionMessage: String?
        private set(value): Unit = set(10, value)
        get(): String? = get(10) as String?

    var screenAfterActionMessage: String?
        private set(value): Unit = set(11, value)
        get(): String? = get(11) as String?

    var projectId: UUID
        private set(value): Unit = set(12, value)
        get(): UUID = get(12) as UUID

    var createdAt: UtcDateTime
        private set(value): Unit = set(13, value)
        get(): UtcDateTime = get(13) as UtcDateTime
    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    constructor(id: UUID, chainId: ChainId, redirectUrl: String, tokenAddress: ContractAddress, tokenAmount: Balance, lockDurationSeconds: DurationSeconds, lockContractAddress: ContractAddress, tokenSenderAddress: WalletAddress?, arbitraryData: JsonNode?, txHash: TransactionHash?, screenBeforeActionMessage: String?, screenAfterActionMessage: String?, projectId: UUID, createdAt: UtcDateTime): this() {
        this.id = id
        this.chainId = chainId
        this.redirectUrl = redirectUrl
        this.tokenAddress = tokenAddress
        this.tokenAmount = tokenAmount
        this.lockDurationSeconds = lockDurationSeconds
        this.lockContractAddress = lockContractAddress
        this.tokenSenderAddress = tokenSenderAddress
        this.arbitraryData = arbitraryData
        this.txHash = txHash
        this.screenBeforeActionMessage = screenBeforeActionMessage
        this.screenAfterActionMessage = screenAfterActionMessage
        this.projectId = projectId
        this.createdAt = createdAt
    }
}
