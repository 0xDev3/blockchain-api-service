/*
 * This file is generated by jOOQ.
 */
package dev3.blockchainapiservice.generated.jooq.tables.records


import com.fasterxml.jackson.databind.JsonNode

import dev3.blockchainapiservice.generated.jooq.tables.AssetMultiSendRequestTable
import dev3.blockchainapiservice.util.ChainId
import dev3.blockchainapiservice.util.ContractAddress
import dev3.blockchainapiservice.util.TransactionHash
import dev3.blockchainapiservice.util.UtcDateTime
import dev3.blockchainapiservice.util.WalletAddress

import java.math.BigDecimal
import java.util.UUID

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


@Suppress("UNCHECKED_CAST")
open class AssetMultiSendRequestRecord() : UpdatableRecordImpl<AssetMultiSendRequestRecord>(AssetMultiSendRequestTable) {

    var id: UUID
        private set(value): Unit = set(0, value)
        get(): UUID = get(0) as UUID

    var chainId: ChainId
        private set(value): Unit = set(1, value)
        get(): ChainId = get(1) as ChainId

    var redirectUrl: String
        private set(value): Unit = set(2, value)
        get(): String = get(2) as String

    var tokenAddress: ContractAddress?
        private set(value): Unit = set(3, value)
        get(): ContractAddress? = get(3) as ContractAddress?

    var disperseContractAddress: ContractAddress
        private set(value): Unit = set(4, value)
        get(): ContractAddress = get(4) as ContractAddress

    var assetAmounts: Array<BigDecimal>
        private set(value): Unit = set(5, value)
        get(): Array<BigDecimal> = get(5) as Array<BigDecimal>

    var assetRecipientAddresses: Array<String>
        private set(value): Unit = set(6, value)
        get(): Array<String> = get(6) as Array<String>

    var itemNames: Array<String>
        private set(value): Unit = set(7, value)
        get(): Array<String> = get(7) as Array<String>

    var assetSenderAddress: WalletAddress?
        private set(value): Unit = set(8, value)
        get(): WalletAddress? = get(8) as WalletAddress?

    var arbitraryData: JsonNode?
        private set(value): Unit = set(9, value)
        get(): JsonNode? = get(9) as JsonNode?

    var approveTxHash: TransactionHash?
        private set(value): Unit = set(10, value)
        get(): TransactionHash? = get(10) as TransactionHash?

    var disperseTxHash: TransactionHash?
        private set(value): Unit = set(11, value)
        get(): TransactionHash? = get(11) as TransactionHash?

    var approveScreenBeforeActionMessage: String?
        private set(value): Unit = set(12, value)
        get(): String? = get(12) as String?

    var approveScreenAfterActionMessage: String?
        private set(value): Unit = set(13, value)
        get(): String? = get(13) as String?

    var disperseScreenBeforeActionMessage: String?
        private set(value): Unit = set(14, value)
        get(): String? = get(14) as String?

    var disperseScreenAfterActionMessage: String?
        private set(value): Unit = set(15, value)
        get(): String? = get(15) as String?

    var projectId: UUID
        private set(value): Unit = set(16, value)
        get(): UUID = get(16) as UUID

    var createdAt: UtcDateTime
        private set(value): Unit = set(17, value)
        get(): UtcDateTime = get(17) as UtcDateTime
    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<UUID?> = super.key() as Record1<UUID?>

    constructor(id: UUID, chainId: ChainId, redirectUrl: String, tokenAddress: ContractAddress?, disperseContractAddress: ContractAddress, assetAmounts: Array<BigDecimal>, assetRecipientAddresses: Array<String>, itemNames: Array<String>, assetSenderAddress: WalletAddress?, arbitraryData: JsonNode?, approveTxHash: TransactionHash?, disperseTxHash: TransactionHash?, approveScreenBeforeActionMessage: String?, approveScreenAfterActionMessage: String?, disperseScreenBeforeActionMessage: String?, disperseScreenAfterActionMessage: String?, projectId: UUID, createdAt: UtcDateTime): this() {
        this.id = id
        this.chainId = chainId
        this.redirectUrl = redirectUrl
        this.tokenAddress = tokenAddress
        this.disperseContractAddress = disperseContractAddress
        this.assetAmounts = assetAmounts
        this.assetRecipientAddresses = assetRecipientAddresses
        this.itemNames = itemNames
        this.assetSenderAddress = assetSenderAddress
        this.arbitraryData = arbitraryData
        this.approveTxHash = approveTxHash
        this.disperseTxHash = disperseTxHash
        this.approveScreenBeforeActionMessage = approveScreenBeforeActionMessage
        this.approveScreenAfterActionMessage = approveScreenAfterActionMessage
        this.disperseScreenBeforeActionMessage = disperseScreenBeforeActionMessage
        this.disperseScreenAfterActionMessage = disperseScreenAfterActionMessage
        this.projectId = projectId
        this.createdAt = createdAt
    }
}
